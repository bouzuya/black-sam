// Generated by CoffeeScript 1.10.0
(function() {
  var commander, fs, getBaseNamePath, getCommand, getConfig, getDataFile, getMetaFile, getTemplate, moment, path, render, writeData, writeMeta;

  fs = require('fs-extra');

  path = require('path');

  commander = require('commander-b');

  moment = require('moment');

  getTemplate = require('./template');

  getBaseNamePath = function(dir, date) {
    var _, m, ref, y;
    ref = date.split('-'), y = ref[0], m = ref[1], _ = ref[2];
    return path.join(dir, y, m, date);
  };

  getCommand = function() {
    var program;
    program = commander('black-sam');
    program.version(require('../package.json').version);
    program.command('new', 'create a new post').option('-d, --date <date>').option('-y, --yesterday').option('-t, --template <template>').option('-w, --weekend').action(function(options) {
      var config, data, dataFile, date, id, meta, metaFile, ref, ref1, ts;
      if (options == null) {
        options = {};
      }
      config = getConfig();
      options.directory = config.directory;
      ts = options.yesterday ? moment().subtract(1, 'd').format('YYYY-MM-DD') + 'T23:59:59+09:00' : options.date ? options.date + 'T23:59:59+09:00' : null;
      date = moment.apply(null, ts != null ? [ts, 'YYYY-MM-DDThh:mm:ssZ'] : []);
      dataFile = getDataFile(options.directory, date.format('YYYY-MM-DD'));
      metaFile = getMetaFile(options.directory, date.format('YYYY-MM-DD'));
      if (fs.existsSync(dataFile)) {
        console.error("the post " + dataFile + " already exists");
        return 1;
      } else {
        id = (ref = options.template) != null ? ref : (options.weekend ? 'weekend' : 'default');
        ref1 = render(id, {
          date: date,
          directory: options.directory
        }), meta = ref1.meta, data = ref1.data;
        writeMeta(metaFile, meta);
        writeData(dataFile, data);
        console.log(['create a new post', dataFile, metaFile].join('\n'));
        return 0;
      }
    });
    return program;
  };

  getConfig = function() {
    var config, configFile, cwd, packageJson, pkg, ref, ref1;
    configFile = path.join(process.env.HOME, '.bbn.json');
    config = fs.existsSync(configFile) ? (console.warn('DEPRECATED: Use `package.json` instead of `~/.bbn.json`.'), require(configFile)) : (cwd = process.cwd(), packageJson = path.join(cwd, 'package.json'), fs.existsSync(packageJson) ? (pkg = JSON.parse(fs.readFileSync(packageJson)), (ref = pkg['black-sam']) != null ? ref : {}) : {});
    config.directory = (ref1 = config.directory) != null ? ref1 : '/home/bouzuya/blog.bouzuya.net';
    return config;
  };

  getDataFile = function(dir, date) {
    return getBaseNamePath(dir, date) + '.md';
  };

  getMetaFile = function(dir, date) {
    return getBaseNamePath(dir, date) + '.json';
  };

  render = function(id, arg) {
    var data, date, directory, meta, ref;
    date = arg.date, directory = arg.directory;
    ref = getTemplate(id), data = ref.data, meta = ref.meta;
    return {
      data: data({
        date: date,
        directory: directory
      }),
      meta: meta({
        date: date,
        directory: directory
      })
    };
  };

  writeData = function(file, data) {
    return fs.outputFileSync(file, data, {
      encoding: 'utf8'
    });
  };

  writeMeta = function(file, meta) {
    var data;
    data = JSON.stringify(meta, null, 2);
    return fs.outputFileSync(file, data, {
      encoding: 'utf8'
    });
  };

  module.exports = function() {
    var command;
    command = getCommand();
    return command.execute();
  };

}).call(this);
